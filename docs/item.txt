package item // import "github.com/mariomac/gostream/item"

Package item provides helper types and constraints for Stream operator

FUNCTIONS

func Add[T Addable](a, b T) T
    Add the two arguments using the plus + operator

func Equals[T comparable](reference T) func(i T) bool
    Equals returns a predicate that is true when the checked value is equal to
    the provided reference.

func GreaterThan[T constraints.Ordered](reference T) func(i T) bool
    GreaterThan returns a predicate that is true when the checked value is
    larger than the provided reference.

func GreaterThanOrEq[T constraints.Ordered](reference T) func(i T) bool
    GreaterThanOrEq returns a predicate that is true when the checked value is
    equal or larger than the provided reference.

func Increment[T Number](a T) T
    Increment the argument

func IsZero[T comparable](input T) bool
    IsZero returns true if the input value corresponds to the zero value of its
    type: 0 for numeric values, empty string, false, nil pointer, etc...

func LessThan[T constraints.Ordered](reference T) func(i T) bool
    LessThan returns a predicate that is true when the checked value is less
    than the provided reference.

func LessThanOrEq[T constraints.Ordered](reference T) func(i T) bool
    LessThanOrEq returns a predicate that is true when the checked value is
    equal or less than the provided reference.

func Multiply[T Number](a, b T) T
    Multiply the two arguments using the multiplication * operator

func Neg[T Number](a T) T
    Neg inverts the sign of the given numeric argument

func Not[T any](condition func(i T) bool) func(i T) bool
    Not negates the boolean result of the input condition function


TYPES

type Addable interface {
	constraints.Ordered | constraints.Complex
}
    Number constraint any type that define the addition + operation, and their
    subtypes

type Number interface {
	constraints.Integer | constraints.Float | constraints.Complex
}
    Number constraint: ints, uints, complexes, floats and all their subtypes

type Pair[K comparable, V any] struct {
	Key K
	Val V
}
    Pair of Key-Value made to manage maps and other key-value structures TODO:
    use "constraints.Map" when it is defined in the constraints package

