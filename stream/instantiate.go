package stream

// Of creates an Stream from a variable number of elements that are passed as
// arguments.
func Of[T any](elems ...T) Stream[T] {
	return OfSlice(elems)
}

// OfSlice creates a Stream from a slice.
func OfSlice[T any](elems []T) Stream[T] {
	return (&sliceStream[T]{items: elems}).attach()
}

// Generate an infinite sequential stream where each element is generated by the provided supplier function
func Generate[T any](supplier func() T) Stream[T] {
	return newIterableStream(func() iterator[T] {
		return func() (T, bool) {
			return supplier(), true
		}
	})
}
